/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ebooksharing1;

import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author indrajit
 */
public class tabpannedUserPage2 extends javax.swing.JFrame {

    /**
     * Creates new form tabpannedUserPage
     */
    String Cover_filepath = "";
    String Book_filepath = "";
    private static String firstname = "";
    private static String status = "";
    private static String username = "";

    public tabpannedUserPage2(String status, String firstname, String username) {
        super("Register User Page");
        this.username = username;
        this.status = status;
        this.firstname = firstname;
        initComponents();
        setgreetings();
        populateContributedTable();
        populatependingContributedTable();
        populateSentMessageTable();
        populateReceiveMessageTable();
        populateDropDownCombo();
        populateUserDetails();
        populateInvitationSentTable();
        populateInvitationReceivedTable();
        populateReadBookTable();
    }

    private void setgreetings() {
        UserNametobePosted.setText("Welcome " + username);
        StatusLabel.setText("Status: " + status);
        messageBoxControl();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        UsersRegistrationPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("UsersRegistrationPU").createEntityManager();
        bookinfoQuery1 = java.beans.Beans.isDesignTime() ? null : UsersRegistrationPUEntityManager.createQuery("SELECT b FROM Bookinfo b");
        bookinfoList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : bookinfoQuery1.getResultList();
        UserProfileTab1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        BooksListLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        RateSelectedBookButton = new javax.swing.JButton();
        ReadSelectedBookButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        SummaryTextArea = new javax.swing.JTextArea();
        InviteButton2 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        ReviewDisplayTable = new javax.swing.JTable();
        UserNameComboBox = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        FirstNameLabel = new javax.swing.JLabel();
        LastNameLabel = new javax.swing.JLabel();
        FNameTextField = new javax.swing.JTextField();
        LastNameTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        BookContributedByUserTable = new javax.swing.JTable();
        EmailTextField = new javax.swing.JTextField();
        PointEarnedTextField = new javax.swing.JTextField();
        gotComplaintTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        BookPendingUserTable = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        UserTypeTextField = new javax.swing.JTextField();
        jScrollPane12 = new javax.swing.JScrollPane();
        ReadBookTable = new javax.swing.JTable();
        ReadBooksLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BookSubmitButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        BookAuthorTextField = new javax.swing.JTextField();
        BookNameTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        CancelButton = new javax.swing.JButton();
        BookBrowseButton = new javax.swing.JButton();
        BrowseCoverpageButton = new javax.swing.JButton();
        UploadcoverPageLabel = new javax.swing.JLabel();
        UploadBookLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        BookSummaryTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        pointsTextField = new javax.swing.JTextField();
        coverpagepathprint = new javax.swing.JLabel();
        coverpagepathprintLabel = new javax.swing.JLabel();
        bookpathprintlabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        SentMessageTable = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        ReceivedMessage = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        MessageTextArea = new javax.swing.JTextArea();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        MessageSendButton = new javax.swing.JButton();
        ClearMessage = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        InvitationSentTable = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        InvitationReceivedTable = new javax.swing.JTable();
        AcceptInvitationButton = new javax.swing.JButton();
        LogOutButton = new javax.swing.JButton();
        UserNametobePosted = new javax.swing.JLabel();
        StatusLabel = new javax.swing.JLabel();
        RefreshButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(51, 153, 0));

        jPanel1.setBackground(new java.awt.Color(51, 153, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 51, 0)));
        jPanel1.setPreferredSize(new java.awt.Dimension(1202, 635));

        BooksListLabel.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        BooksListLabel.setText("List of books ");

        jTable1.setRowHeight(200);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, bookinfoList1, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${bookid}"));
        columnBinding.setColumnName("Book ID");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${image}"));
        columnBinding.setColumnName("Cover");
        columnBinding.setColumnClass(javax.swing.ImageIcon.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${bookname}"));
        columnBinding.setColumnName("Book Name");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${author}"));
        columnBinding.setColumnName("Author");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${uploader}"));
        columnBinding.setColumnName("Uploader");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${readingPoints}"));
        columnBinding.setColumnName("Reading Points");
        columnBinding.setColumnClass(Short.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${readingTotalDuration}"));
        columnBinding.setColumnName("Reading Total Duration");
        columnBinding.setColumnClass(java.math.BigInteger.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${rating}"));
        columnBinding.setColumnName("Rating");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel12.setText("Review of the selected book");

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel13.setText("Summary");

        RateSelectedBookButton.setText("Rate/Review Book");
        RateSelectedBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RateSelectedBookButtonActionPerformed(evt);
            }
        });

        ReadSelectedBookButton.setText("Read selected Book");
        ReadSelectedBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadSelectedBookButtonActionPerformed(evt);
            }
        });

        SummaryTextArea.setColumns(20);
        SummaryTextArea.setRows(5);
        jScrollPane5.setViewportView(SummaryTextArea);

        InviteButton2.setText("Invite to read book");
        InviteButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InviteButton2ActionPerformed(evt);
            }
        });

        ReviewDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(ReviewDisplayTable);

        UserNameComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 889, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(UserNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(InviteButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ReadSelectedBookButton)
                            .addComponent(RateSelectedBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BooksListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BooksListLabel)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ReadSelectedBookButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RateSelectedBookButton)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(InviteButton2)
                        .addComponent(UserNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        UserProfileTab1.addTab("Browse Book", jPanel1);

        jPanel4.setBackground(new java.awt.Color(51, 153, 0));

        FirstNameLabel.setText("First Name:");

        LastNameLabel.setText("Last Name:");

        jLabel6.setText("Email");

        jLabel8.setText("Point Earned");

        jLabel9.setText("Got Complain");

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel10.setText("The list of books you contributed");

        BookContributedByUserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "BookName", "Author", "Ratings"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(BookContributedByUserTable);

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        jLabel11.setText("Your Details");

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel15.setText("Approved books in selves");

        BookPendingUserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "BookName", "Author", "RequestedPoints"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(BookPendingUserTable);

        jLabel16.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel16.setText("Pending Books");

        jLabel22.setText("User Type");

        ReadBookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Book Id", "Time in sec"
            }
        ));
        jScrollPane12.setViewportView(ReadBookTable);

        ReadBooksLabel.setText("List of Books You Read");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(LastNameLabel)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(FirstNameLabel)
                            .addComponent(jLabel22))
                        .addGap(66, 66, 66)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(PointEarnedTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                            .addComponent(gotComplaintTextField)
                            .addComponent(EmailTextField)
                            .addComponent(LastNameTextField)
                            .addComponent(FNameTextField)
                            .addComponent(UserTypeTextField)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel10)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jLabel11)))
                .addGap(102, 102, 102)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ReadBooksLabel)
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(ReadBooksLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FirstNameLabel)
                            .addComponent(FNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LastNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(PointEarnedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gotComplaintTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(UserTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(84, 84, 84))
        );

        UserProfileTab1.addTab("User Profile", jPanel4);

        jPanel2.setBackground(new java.awt.Color(51, 153, 0));
        jPanel2.setToolTipText("");

        jLabel1.setText("Book Name");

        BookSubmitButton.setText("Submit");
        BookSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookSubmitButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Book Author");

        jLabel4.setText("Book Summary");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel7.setText("Please enter the book details");

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        BookBrowseButton.setText("Browse");
        BookBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookBrowseButtonActionPerformed(evt);
            }
        });

        BrowseCoverpageButton.setText("Browse");
        BrowseCoverpageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseCoverpageButtonActionPerformed(evt);
            }
        });

        UploadcoverPageLabel.setText("Upload CoverPage");

        UploadBookLabel.setText("Upload Book");

        BookSummaryTextArea.setColumns(20);
        BookSummaryTextArea.setRows(5);
        jScrollPane2.setViewportView(BookSummaryTextArea);

        jLabel2.setText("Points deserve");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(860, Short.MAX_VALUE)
                .addComponent(coverpagepathprint)
                .addGap(316, 316, 316))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(351, 351, 351)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(UploadcoverPageLabel)
                            .addComponent(UploadBookLabel))
                        .addGap(88, 88, 88)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(BrowseCoverpageButton)
                                    .addComponent(BookBrowseButton))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bookpathprintlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(coverpagepathprintLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(BookAuthorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BookNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(343, 343, 343)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(433, 433, 433)
                        .addComponent(CancelButton)
                        .addGap(18, 18, 18)
                        .addComponent(BookSubmitButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(BookNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(BookAuthorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(pointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addComponent(jLabel4))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BrowseCoverpageButton)
                            .addComponent(coverpagepathprintLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(UploadcoverPageLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BookBrowseButton)
                        .addComponent(UploadBookLabel))
                    .addComponent(bookpathprintlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BookSubmitButton)
                    .addComponent(CancelButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(coverpagepathprint)
                .addGap(218, 218, 218))
        );

        UserProfileTab1.addTab("Book Upload", jPanel2);

        jPanel3.setBackground(new java.awt.Color(51, 153, 0));

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel5.setText("Your messages ");

        jLabel17.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel17.setText("Sent Messages");

        jLabel18.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel18.setText("Message Inbox");

        SentMessageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Receiver", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SentMessageTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sentmessageTableRowMouseclick(evt);
            }
        });
        jScrollPane7.setViewportView(SentMessageTable);

        ReceivedMessage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sender", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ReceivedMessage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InboxTableRowMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(ReceivedMessage);

        MessageTextArea.setColumns(20);
        MessageTextArea.setRows(5);
        jScrollPane9.setViewportView(MessageTextArea);

        jLabel19.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel19.setText("Write message");

        jLabel20.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel20.setText("To");

        MessageSendButton.setText("Send");
        MessageSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MessageSendButtonActionPerformed(evt);
            }
        });

        ClearMessage.setText("Clear Message Area");
        ClearMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearMessageActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane8))
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                            .addComponent(ClearMessage)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(MessageSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 31, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 937, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClearMessage)
                    .addComponent(MessageSendButton))
                .addGap(170, 170, 170))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel5)
                .addGap(19, 19, 19)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        UserProfileTab1.addTab("Messages", jPanel3);

        jPanel5.setBackground(new java.awt.Color(51, 153, 0));

        jLabel23.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel23.setText("Invitation Received ");

        jLabel24.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel24.setText("Invitation Sent");

        InvitationSentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "You Invited", "Shared Points"
            }
        ));
        jScrollPane10.setViewportView(InvitationSentTable);

        InvitationReceivedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Invited By", "Shared Points"
            }
        ));
        jScrollPane11.setViewportView(InvitationReceivedTable);

        AcceptInvitationButton.setText("Accept Invitation");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(AcceptInvitationButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24))
                        .addContainerGap(66, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(54, 54, 54)
                .addComponent(AcceptInvitationButton)
                .addContainerGap(178, Short.MAX_VALUE))
        );

        UserProfileTab1.addTab("Invitations", jPanel5);

        LogOutButton.setText("LogOut");
        LogOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutButtonActionPerformed(evt);
            }
        });

        UserNametobePosted.setFont(new java.awt.Font("Lao MN", 1, 18)); // NOI18N
        UserNametobePosted.setText("Wecome:");

        StatusLabel.setFont(new java.awt.Font("Lao MN", 1, 18)); // NOI18N
        StatusLabel.setText("Status:");

        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(UserProfileTab1, javax.swing.GroupLayout.PREFERRED_SIZE, 1197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LogOutButton)
                .addGap(18, 18, 18)
                .addComponent(RefreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(UserNametobePosted, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(StatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LogOutButton)
                    .addComponent(UserNametobePosted)
                    .addComponent(StatusLabel)
                    .addComponent(RefreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserProfileTab1, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BrowseCoverpageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseCoverpageButtonActionPerformed
        // TODO add your handling code here:

        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File file = chooser.getSelectedFile();
        Cover_filepath = file.getAbsolutePath();
        coverpagepathprintLabel.setText(Cover_filepath);
    }//GEN-LAST:event_BrowseCoverpageButtonActionPerformed

    private void BookBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookBrowseButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File file = chooser.getSelectedFile();
        Book_filepath = file.getAbsolutePath();
        bookpathprintlabel.setText(Book_filepath);
    }//GEN-LAST:event_BookBrowseButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        // TODO add your handling code here:
        clearTextField();

    }//GEN-LAST:event_CancelButtonActionPerformed

    private void BookSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookSubmitButtonActionPerformed
        // TODO add your handling code here:
        submit();
        clearTextField();


    }//GEN-LAST:event_BookSubmitButtonActionPerformed

    private void messageBoxControl() {
        MessageTextArea.setText("Write your message here");
        MessageTextArea.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                MessageTextArea.setText("");
            }
        });
    }

    private void submit() {
        String B_name = BookNameTextField.getText();
        String A_name = BookAuthorTextField.getText();
        String B_summary = BookSummaryTextArea.getText();
        //String Uploadtext = BookSummaryTextArea.getText();
        //String uploader_name = UploaderNameTextField.getText();
        String requestedPoints = pointsTextField.getText();

        try {

            if (!B_name.isEmpty() && !A_name.isEmpty() && !B_summary.isEmpty() && !Cover_filepath.isEmpty() && !Book_filepath.isEmpty() && !requestedPoints.isEmpty()) // && !uploader_name.isEmpty()
            {
                DbConnector dbc = new DbConnector();
                Connection conn = dbc.Connects();

                String sql = "INSERT INTO PendingBook (uploader, bookname, cover, author, summary, bookfile,  request_points, granted_points) "
                        + "VALUES (?, ?, ?, ?, ?, ?, ?, " + 0 + ")";

                PreparedStatement stmt = conn.prepareStatement(sql);
                //stmt.setString(1, uploader_name);
                stmt.setString(1, username);
                stmt.setString(2, B_name);
                File Cover_image = new File(Cover_filepath);
                FileInputStream Cover = new FileInputStream(Cover_image);
                stmt.setBinaryStream(3, Cover, (int) Cover_image.length());
                stmt.setString(4, A_name);
                stmt.setString(5, B_summary);
                File Book_image = new File(Book_filepath);
                FileInputStream Book = new FileInputStream(Book_image);
                stmt.setBinaryStream(6, Book, (int) Book_image.length());
                int point = Integer.parseInt(requestedPoints);
                stmt.setInt(7, point);

                Statement User_Stmt = conn.createStatement();
                String User_query = "Select bookname, author, uploader from PendingBook";
                ResultSet User_result = User_Stmt.executeQuery(User_query);
                boolean checkmatch = false;
                //boolean copyrightcheck = false;

                boolean UT = false;
                //                if (!UserNameText.isEmpty() && !PassWordText.isEmpty()) {
                while (User_result.next()) {
                    String BookN = User_result.getString("bookname");
                    String AuthorN = User_result.getString("author");
                    //String uploaderN = User_result.getString("uploader");//should find uploader username from UserInfo table for now its from Bookpending

                    if (BookN.equalsIgnoreCase(B_name) && AuthorN.equalsIgnoreCase(A_name))// && uploaderN.equalsIgnoreCase(uploader_name))
                    {
                        checkmatch = true;
                        //copyrightcheck = true;
                    }
                }
                if (checkmatch) {
                    JOptionPane.showMessageDialog(null, "Repeated submission book is prohibited");

//                } else if (copyrightcheck) {
//                    final JPanel panel = new JPanel();
//                    showMessageDialog(panel, "Copyright Issue", "Warning",
//                            JOptionPane.WARNING_MESSAGE);
                } else {
                    //}
                    stmt.execute();

                    conn.commit();
                    conn.close();
                    JOptionPane.showMessageDialog(null, "Book submission succcessful.");
                }
                Cover.close();
                Book.close();
            } else {
                JOptionPane.showMessageDialog(null, "All fields required.", "Warning", JOptionPane.WARNING_MESSAGE);
            }

        } catch (SQLException | HeadlessException | IOException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());

        }
    }

    private void ReadSelectedBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadSelectedBookButtonActionPerformed
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        if (row != -1) {
            int bid = (int) jTable1.getModel().getValueAt(row, 0);

            int users_total_point = get_points_available();
            if (users_total_point > 0) {
                //passBookID();
                BookOpened bo = new BookOpened(bid);
                bo.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Sorry You don't have enough points");
            }

        } else {
            JOptionPane.showMessageDialog(null, "No book selected");
        }
    }//GEN-LAST:event_ReadSelectedBookButtonActionPerformed

    private int get_points_available() {
        ResultSet rs = null;
        PreparedStatement pst = null;
        int user_point = 0;
        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();

            //int row = SentMessageTable.getSelectedRow();
            //int rowNum = (int) SentMessageTable.getModel().getValueAt(row, 0);
            String sql = "SELECT point_balance FROM UserInfo  WHERE username = ?";
            pst = conn.prepareStatement(sql);
            pst.setString(1, username);
            rs = pst.executeQuery();
            while (rs.next()) {
                user_point = rs.getInt("point_balance");
            }

            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return user_point;
    }

    private void populateUserDetails() {
        ResultSet rs = null;
        PreparedStatement pst = null;
        FNameTextField.setText("");
        LastNameTextField.setText("");
        EmailTextField.setText("");
        PointEarnedTextField.setText("");
        gotComplaintTextField.setText("");

        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            //int row = SentMessageTable.getSelectedRow();
            //int rowNum = (int) SentMessageTable.getModel().getValueAt(row, 0);
            String sql = "SELECT * FROM UserInfo  WHERE username = ?";
            pst = conn.prepareStatement(sql);
            pst.setString(1, username);
            rs = pst.executeQuery();

            while (rs.next()) {
                FNameTextField.setText(rs.getString("firstname"));
                FNameTextField.setEnabled(false);
                LastNameTextField.setText(rs.getString("lastname"));
                LastNameTextField.setEnabled(false);
                EmailTextField.setText(rs.getString("email"));
                EmailTextField.setEnabled(false);
                PointEarnedTextField.setText(rs.getString("point_balance"));
                PointEarnedTextField.setEnabled(false);
                gotComplaintTextField.setText(rs.getString("got_Complainted"));
                gotComplaintTextField.setEditable(false);

                if (rs.getBoolean("is_SU")) {
                    UserTypeTextField.setText("SuperUser");
                } else {
                    UserTypeTextField.setText("User");
                }//MessageTextArea.setLineWrap(true);

            }
            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:  
        displaySummary();
        populateReviewtable();
        //jTable1.setEnabled(false);

    }//GEN-LAST:event_jTable1MouseClicked

    private void LogOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutButtonActionPerformed
        // TODO add your handling code here:
        //JOptionPane.showMessageDialog(null, "You are logged out.");
        cancel();
        tabpannedAH ulf = new tabpannedAH();
        ulf.setVisible(true);
    }//GEN-LAST:event_LogOutButtonActionPerformed

    private void RateSelectedBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RateSelectedBookButtonActionPerformed
        // TODO add your handling code here:
        
        /*
        public ImageIcon getImage(){
        return new ImageIcon(new ImageIcon(cover).getImage().getScaledInstance(100, 150, java.awt.Image.SCALE_SMOOTH));}
        */
                
        int row = jTable1.getSelectedRow();
        if (row != -1) {
            int bid = (int) jTable1.getModel().getValueAt(row, 0);
            int readduration = get_user_reading_duration();
            if (readduration > 0) {
                ReviewRateFrame bo = new ReviewRateFrame(bid, username);
                bo.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "You haven't read this book yet!", "warning", JOptionPane.WARNING_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(null, "No book selected");
        }

    }//GEN-LAST:event_RateSelectedBookButtonActionPerformed


    private void sentmessageTableRowMouseclick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sentmessageTableRowMouseclick
        // TODO add your handling code here:
        ResultSet rs = null;
        PreparedStatement pst = null;
        MessageTextArea.setText("");

        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            int row = SentMessageTable.getSelectedRow();
            int rowNum = (int) SentMessageTable.getModel().getValueAt(row, 0);
            String sql = "SELECT message_txt FROM Message  where Message.MID = ?";
            pst = conn.prepareStatement(sql);
            pst.setInt(1, rowNum);
            rs = pst.executeQuery();

            while (rs.next()) {

                MessageTextArea.setText(rs.getString("Message_txt"));
                //MessageTextArea.setEditable(false);
                MessageTextArea.setLineWrap(true);

            }
            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_sentmessageTableRowMouseclick

    private void InboxTableRowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InboxTableRowMouseClicked
        // TODO add your handling code here:
        ResultSet rs = null;
        PreparedStatement pst = null;
        MessageTextArea.setText("");

        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            int row = ReceivedMessage.getSelectedRow();
            int rowNum = (int) ReceivedMessage.getModel().getValueAt(row, 0);
            String sql = "SELECT message_txt FROM Message  where Message.MID = ?";
            pst = conn.prepareStatement(sql);
            pst.setInt(1, rowNum);
            rs = pst.executeQuery();

            while (rs.next()) {

                MessageTextArea.setText(rs.getString("Message_txt"));
                //MessageTextArea.setEditable(false);
                MessageTextArea.setLineWrap(true);

            }
            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_InboxTableRowMouseClicked

    private void ClearMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearMessageActionPerformed
        // TODO add your handling code here:
        MessageTextArea.setText("");
        jComboBox1.setSelectedItem("Please Select...");
    }//GEN-LAST:event_ClearMessageActionPerformed

    private void MessageSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MessageSendButtonActionPerformed

        // TODO add your handling code here:
        //this button checks the points availabel and if ok sends message to the selected user to read the book
        String receiver = (String) jComboBox1.getSelectedItem();
        String message = MessageTextArea.getText();
        DbConnector dbc = new DbConnector();
        Connection conn = dbc.Connects();

        //int row = jTable1.getSelectedRow();
        //int rowNum = (int) jTable1.getModel().getValueAt(row, 0);
        String Sql = "INSERT INTO Message (Sender, Receiver, message_txt) "
                + "VALUES (?, ?, ?)";
        try {
            PreparedStatement stmt = conn.prepareStatement(Sql);
            //stmt.setString(1, uploader_name);
            if (receiver.equals("Please Select...") || message.isEmpty() ||message.equals("Write your message here")) {
                JOptionPane.showMessageDialog(null, "Please Check the fields", "Input Error!", JOptionPane.WARNING_MESSAGE);
            } else {
                stmt.setString(1, username);
                stmt.setString(2, receiver);
                stmt.setString(3, message);
                stmt.execute();
                MessageTextArea.setText("");
                jComboBox1.setSelectedItem("Please Select...");
                JOptionPane.showMessageDialog(null, "Message sent");

                conn.commit();
                conn.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(tabpannedUserPage2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_MessageSendButtonActionPerformed

    private void InviteButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InviteButton2ActionPerformed
        // TODO add your handling code here:
        String user = (String) UserNameComboBox.getSelectedItem();
        if (!user.equals("Please Select...")) {
            JOptionPane.showMessageDialog(null, user);
        } else {
            JOptionPane.showMessageDialog(null, "Please select the valid user.");
        }

    }//GEN-LAST:event_InviteButton2ActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        // TODO add your handling code here:
        //cancel();
        revalidate();
        repaint();
        //tabpannedUserPage tbU = new tabpannedUserPage(status, firstname, username);
        //tbU.setVisible(true);
    }//GEN-LAST:event_RefreshButtonActionPerformed

//Helper functions
    private int get_user_reading_duration() {
        ResultSet rs = null;
        PreparedStatement pst = null;
        int read_duration = 0;

        DbConnector dbc = new DbConnector();
        Connection conn = dbc.Connects();
        int row = jTable1.getSelectedRow();
        int rowNum = (int) jTable1.getModel().getValueAt(row, 0);

        String sql = "SELECT reading_duration FROM READINGHISTORY  WHERE ReadingHistory.Bookid = ? AND ReadingHistory.username = ?";
        try {
            pst = conn.prepareStatement(sql);
            pst.setInt(1, rowNum);
            pst.setString(2, username);
            rs = pst.executeQuery();
            while (rs.next()) {
                read_duration = rs.getInt("reading_duration");
            }

        } catch (SQLException ex) {
            Logger.getLogger(tabpannedUserPage2.class.getName()).log(Level.SEVERE, null, ex);
        }
        return read_duration;

    }

    private void populateContributedTable() {
        ResultSet rs = null;
        PreparedStatement pst = null;
        DbConnector dbc = new DbConnector();
        Connection conn = dbc.Connects();
        //int row = jTable1.getSelectedRow();
        //int rowNum = (int) jTable1.getModel().getValueAt(row, 0);
        String Sql = "Select bookName AS BookName, author as Author, rating as Ratings  FROM BookInfo WHERE uploader = ?";
        try {
            pst = conn.prepareStatement(Sql);
            pst.setString(1, username);
            rs = pst.executeQuery();
            BookContributedByUserTable.setModel(DbUtils.resultSetToTableModel(rs));
            BookContributedByUserTable.setEnabled(false);
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(tabpannedUserPage2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void populateDropDownCombo() {

        ResultSet rs = null;
        PreparedStatement pst = null;

        jComboBox1.removeAllItems();
        UserNameComboBox.removeAllItems();
        jComboBox1.addItem("Please Select...");
        UserNameComboBox.addItem("Please Select...");

        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            String sql = "SELECT DISTINCT username FROM UserInfo";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();

            while (rs.next()) {
                if (!rs.getString("username").equals(username)) {

                    jComboBox1.addItem(rs.getString("username"));
                    UserNameComboBox.addItem(rs.getString("username"));
                }
            }

        } catch (SQLException sqle) {
            System.out.println(sqle);
        }

    }

    private void populateSentMessageTable() {
        ResultSet rs = null;
        PreparedStatement pst = null;
        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            String Sql = "Select MID AS MessageID, Receiver AS Receiver, Message_txt AS Message FROM Message WHERE Sender = ?";
            pst = conn.prepareStatement(Sql);
            pst.setString(1, username);
            rs = pst.executeQuery();
            SentMessageTable.setModel(DbUtils.resultSetToTableModel(rs));
            //SentMessageTable.setEnabled(false);
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void populateReceiveMessageTable() {
        ResultSet rs = null;
        PreparedStatement pst = null;
        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            String Sql = "Select MID AS MessageID, Sender AS Sender, Message_txt AS Message FROM Message WHERE Receiver = ?";
            pst = conn.prepareStatement(Sql);
            pst.setString(1, username);
            rs = pst.executeQuery();
            ReceivedMessage.setModel(DbUtils.resultSetToTableModel(rs));
            //ReceivedMessage.setEnabled(false);
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    //BookPendingUserTable
    private void populateReadBookTable(){
        ResultSet rs = null;
        PreparedStatement pst = null;

        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            String Sql = "Select BookID, Reading_duration AS Time_read_in_sec  FROM READINGHISTORY WHERE username = ?";
            pst = conn.prepareStatement(Sql);
            pst.setString(1, username);
            rs = pst.executeQuery();
            ReadBookTable.setModel(DbUtils.resultSetToTableModel(rs));
            ReadBookTable.setEnabled(false);
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void populateInvitationSentTable() {
        ResultSet rs = null;
        PreparedStatement pst = null;

        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            //int row = jTable1.getSelectedRow();
            //int rowNum = (int) jTable1.getModel().getValueAt(row, 0);
            String Sql = "Select invitee AS You_Invited, sharing_points AS SharedPoints, accepted_invitation AS Shared_Status FROM INVITATION WHERE inviter = ?";
            pst = conn.prepareStatement(Sql);
            pst.setString(1, username);
            rs = pst.executeQuery();
            InvitationSentTable.setModel(DbUtils.resultSetToTableModel(rs));
            InvitationSentTable.setEnabled(false);
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void populateInvitationReceivedTable() {
        ResultSet rs = null;
        PreparedStatement pst = null;

        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            //int row = jTable1.getSelectedRow();
            //int rowNum = (int) jTable1.getModel().getValueAt(row, 0);
            String Sql = "Select inviter AS Invited_By, sharing_points AS SharedPoints, accepted_invitation AS Shared_Status FROM INVITATION WHERE invitee = ?";
            pst = conn.prepareStatement(Sql);
            pst.setString(1, username);
            rs = pst.executeQuery();
            InvitationReceivedTable.setModel(DbUtils.resultSetToTableModel(rs));
            InvitationReceivedTable.setEnabled(false);
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearTextField() {
        BookNameTextField.setText("");
        BookAuthorTextField.setText("");
        BookSummaryTextArea.setText("");
        pointsTextField.setText("");
        coverpagepathprintLabel.setText("");
        bookpathprintlabel.setText("");
    }

    private void populatependingContributedTable() {
        ResultSet rs = null;
        PreparedStatement pst = null;

        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            //int row = jTable1.getSelectedRow();
            //int rowNum = (int) jTable1.getModel().getValueAt(row, 0);
            String Sql = "Select bookName AS BookName, author as Author, request_Points as RequestedPoints  FROM pendingbook WHERE uploader = ?";
            pst = conn.prepareStatement(Sql);
            pst.setString(1, username);
            rs = pst.executeQuery();
            BookPendingUserTable.setModel(DbUtils.resultSetToTableModel(rs));
            BookPendingUserTable.setEnabled(false);
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void populateReviewtable() {
        ResultSet rs = null;
        PreparedStatement pst = null;

        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            int row = jTable1.getSelectedRow();
            int rowNum = (int) jTable1.getModel().getValueAt(row, 0);
            String Sql = "Select bookid AS BookID, username AS Reviewer, review_text AS Reviews, rating AS Ratings FROM Review_rating WHERE bookid = ?";
            pst = conn.prepareStatement(Sql);
            pst.setInt(1, rowNum);
            rs = pst.executeQuery();
            ReviewDisplayTable.setModel(DbUtils.resultSetToTableModel(rs));
            ReviewDisplayTable.setEnabled(false);
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void displaySummary() {
        ResultSet rs = null;
        PreparedStatement pst = null;
        SummaryTextArea.setText("");

        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            int row = jTable1.getSelectedRow();
            int rowNum = (int) jTable1.getModel().getValueAt(row, 0);
            String sql = "SELECT summary FROM BookInfo where BookInfo.bookid = ?";
            pst = conn.prepareStatement(sql);
            pst.setInt(1, rowNum);
            rs = pst.executeQuery();

            while (rs.next()) {

                SummaryTextArea.setText(rs.getString("summary"));
                SummaryTextArea.setEditable(false);
                SummaryTextArea.setLineWrap(true);

            }
            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tabpannedUserPage2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tabpannedUserPage2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tabpannedUserPage2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tabpannedUserPage2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tabpannedUserPage2(status, firstname, username).setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AcceptInvitationButton;
    private javax.swing.JTextField BookAuthorTextField;
    private javax.swing.JButton BookBrowseButton;
    private javax.swing.JTable BookContributedByUserTable;
    private javax.swing.JTextField BookNameTextField;
    private javax.swing.JTable BookPendingUserTable;
    private javax.swing.JButton BookSubmitButton;
    private javax.swing.JTextArea BookSummaryTextArea;
    private javax.swing.JLabel BooksListLabel;
    private javax.swing.JButton BrowseCoverpageButton;
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton ClearMessage;
    private javax.swing.JTextField EmailTextField;
    private javax.swing.JTextField FNameTextField;
    private javax.swing.JLabel FirstNameLabel;
    private javax.swing.JTable InvitationReceivedTable;
    private javax.swing.JTable InvitationSentTable;
    private javax.swing.JButton InviteButton2;
    private javax.swing.JLabel LastNameLabel;
    private javax.swing.JTextField LastNameTextField;
    private javax.swing.JButton LogOutButton;
    private javax.swing.JButton MessageSendButton;
    private javax.swing.JTextArea MessageTextArea;
    private javax.swing.JTextField PointEarnedTextField;
    private javax.swing.JButton RateSelectedBookButton;
    private javax.swing.JTable ReadBookTable;
    private javax.swing.JLabel ReadBooksLabel;
    private javax.swing.JButton ReadSelectedBookButton;
    private javax.swing.JTable ReceivedMessage;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JTable ReviewDisplayTable;
    private javax.swing.JTable SentMessageTable;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JTextArea SummaryTextArea;
    private javax.swing.JLabel UploadBookLabel;
    private javax.swing.JLabel UploadcoverPageLabel;
    private javax.swing.JComboBox UserNameComboBox;
    private javax.swing.JLabel UserNametobePosted;
    private javax.swing.JTabbedPane UserProfileTab1;
    private javax.swing.JTextField UserTypeTextField;
    private javax.persistence.EntityManager UsersRegistrationPUEntityManager;
    private java.util.List<ebooksharing1.Bookinfo> bookinfoList1;
    private javax.persistence.Query bookinfoQuery1;
    private javax.swing.JLabel bookpathprintlabel;
    private javax.swing.JLabel coverpagepathprint;
    private javax.swing.JLabel coverpagepathprintLabel;
    private javax.swing.JTextField gotComplaintTextField;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField pointsTextField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public void cancel() {
        WindowEvent winClosing = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosing);
    }

}
